// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/PoorMercymain/urlshrt/internal/domain (interfaces: URLService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	sync "sync"

	domain "github.com/PoorMercymain/urlshrt/internal/domain"
	state "github.com/PoorMercymain/urlshrt/internal/state"
	gomock "github.com/golang/mock/gomock"
)

// MockURLService is a mock of URLService interface.
type MockURLService struct {
	ctrl     *gomock.Controller
	recorder *MockURLServiceMockRecorder
}

// MockURLServiceMockRecorder is the mock recorder for MockURLService.
type MockURLServiceMockRecorder struct {
	mock *MockURLService
}

// NewMockURLService creates a new mock instance.
func NewMockURLService(ctrl *gomock.Controller) *MockURLService {
	mock := &MockURLService{ctrl: ctrl}
	mock.recorder = &MockURLServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLService) EXPECT() *MockURLServiceMockRecorder {
	return m.recorder
}

// CreateShortened mocks base method.
func (m *MockURLService) CreateShortened(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortened", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortened indicates an expected call of CreateShortened.
func (mr *MockURLServiceMockRecorder) CreateShortened(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortened", reflect.TypeOf((*MockURLService)(nil).CreateShortened), arg0, arg1)
}

// CreateShortenedFromBatch mocks base method.
func (m *MockURLService) CreateShortenedFromBatch(arg0 context.Context, arg1 []*domain.BatchElement, arg2 *sync.WaitGroup) ([]domain.BatchElementResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortenedFromBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.BatchElementResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortenedFromBatch indicates an expected call of CreateShortenedFromBatch.
func (mr *MockURLServiceMockRecorder) CreateShortenedFromBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortenedFromBatch", reflect.TypeOf((*MockURLService)(nil).CreateShortenedFromBatch), arg0, arg1, arg2)
}

// DeleteUserURLs mocks base method.
func (m *MockURLService) DeleteUserURLs(arg0 context.Context, arg1 []domain.URLWithID, arg2 *domain.MutexChanString, arg3 *sync.Once, arg4 *sync.WaitGroup) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUserURLs", arg0, arg1, arg2, arg3, arg4)
}

// DeleteUserURLs indicates an expected call of DeleteUserURLs.
func (mr *MockURLServiceMockRecorder) DeleteUserURLs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserURLs", reflect.TypeOf((*MockURLService)(nil).DeleteUserURLs), arg0, arg1, arg2, arg3, arg4)
}

// PingPg mocks base method.
func (m *MockURLService) PingPg(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingPg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingPg indicates an expected call of PingPg.
func (mr *MockURLServiceMockRecorder) PingPg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingPg", reflect.TypeOf((*MockURLService)(nil).PingPg), arg0)
}

// ReadOriginal mocks base method.
func (m *MockURLService) ReadOriginal(arg0 context.Context, arg1 string, arg2 chan error) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOriginal", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOriginal indicates an expected call of ReadOriginal.
func (mr *MockURLServiceMockRecorder) ReadOriginal(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOriginal", reflect.TypeOf((*MockURLService)(nil).ReadOriginal), arg0, arg1, arg2)
}

// ReadUserURLs mocks base method.
func (m *MockURLService) ReadUserURLs(arg0 context.Context) ([]state.URLStringJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserURLs", arg0)
	ret0, _ := ret[0].([]state.URLStringJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserURLs indicates an expected call of ReadUserURLs.
func (mr *MockURLServiceMockRecorder) ReadUserURLs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserURLs", reflect.TypeOf((*MockURLService)(nil).ReadUserURLs), arg0)
}
