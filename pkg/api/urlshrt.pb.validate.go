// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: urlshrt.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ReadOriginalRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOriginalRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOriginalRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOriginalRequestV1MultiError, or nil if none found.
func (m *ReadOriginalRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOriginalRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShortened()) < 1 {
		err := ReadOriginalRequestV1ValidationError{
			field:  "Shortened",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadOriginalRequestV1MultiError(errors)
	}

	return nil
}

// ReadOriginalRequestV1MultiError is an error wrapping multiple validation
// errors returned by ReadOriginalRequestV1.ValidateAll() if the designated
// constraints aren't met.
type ReadOriginalRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOriginalRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOriginalRequestV1MultiError) AllErrors() []error { return m }

// ReadOriginalRequestV1ValidationError is the validation error returned by
// ReadOriginalRequestV1.Validate if the designated constraints aren't met.
type ReadOriginalRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOriginalRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOriginalRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOriginalRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOriginalRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOriginalRequestV1ValidationError) ErrorName() string {
	return "ReadOriginalRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOriginalRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOriginalRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOriginalRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOriginalRequestV1ValidationError{}

// Validate checks the field values on ReadOriginalReplyV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadOriginalReplyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadOriginalReplyV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadOriginalReplyV1MultiError, or nil if none found.
func (m *ReadOriginalReplyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadOriginalReplyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOriginal()) < 1 {
		err := ReadOriginalReplyV1ValidationError{
			field:  "Original",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadOriginalReplyV1MultiError(errors)
	}

	return nil
}

// ReadOriginalReplyV1MultiError is an error wrapping multiple validation
// errors returned by ReadOriginalReplyV1.ValidateAll() if the designated
// constraints aren't met.
type ReadOriginalReplyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadOriginalReplyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadOriginalReplyV1MultiError) AllErrors() []error { return m }

// ReadOriginalReplyV1ValidationError is the validation error returned by
// ReadOriginalReplyV1.Validate if the designated constraints aren't met.
type ReadOriginalReplyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadOriginalReplyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadOriginalReplyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadOriginalReplyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadOriginalReplyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadOriginalReplyV1ValidationError) ErrorName() string {
	return "ReadOriginalReplyV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ReadOriginalReplyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadOriginalReplyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadOriginalReplyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadOriginalReplyV1ValidationError{}

// Validate checks the field values on CreateShortenedRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortenedRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortenedRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortenedRequestV1MultiError, or nil if none found.
func (m *CreateShortenedRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortenedRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOriginal()) < 1 {
		err := CreateShortenedRequestV1ValidationError{
			field:  "Original",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateShortenedRequestV1MultiError(errors)
	}

	return nil
}

// CreateShortenedRequestV1MultiError is an error wrapping multiple validation
// errors returned by CreateShortenedRequestV1.ValidateAll() if the designated
// constraints aren't met.
type CreateShortenedRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortenedRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortenedRequestV1MultiError) AllErrors() []error { return m }

// CreateShortenedRequestV1ValidationError is the validation error returned by
// CreateShortenedRequestV1.Validate if the designated constraints aren't met.
type CreateShortenedRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortenedRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortenedRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortenedRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortenedRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortenedRequestV1ValidationError) ErrorName() string {
	return "CreateShortenedRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortenedRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortenedRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortenedRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortenedRequestV1ValidationError{}

// Validate checks the field values on CreateShortenedReplyV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortenedReplyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortenedReplyV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShortenedReplyV1MultiError, or nil if none found.
func (m *CreateShortenedReplyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortenedReplyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShortened()) < 1 {
		err := CreateShortenedReplyV1ValidationError{
			field:  "Shortened",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateShortenedReplyV1MultiError(errors)
	}

	return nil
}

// CreateShortenedReplyV1MultiError is an error wrapping multiple validation
// errors returned by CreateShortenedReplyV1.ValidateAll() if the designated
// constraints aren't met.
type CreateShortenedReplyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortenedReplyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortenedReplyV1MultiError) AllErrors() []error { return m }

// CreateShortenedReplyV1ValidationError is the validation error returned by
// CreateShortenedReplyV1.Validate if the designated constraints aren't met.
type CreateShortenedReplyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortenedReplyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortenedReplyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortenedReplyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortenedReplyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortenedReplyV1ValidationError) ErrorName() string {
	return "CreateShortenedReplyV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortenedReplyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortenedReplyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortenedReplyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortenedReplyV1ValidationError{}

// Validate checks the field values on CreateShortenedFromBatchRequestV1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateShortenedFromBatchRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortenedFromBatchRequestV1
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateShortenedFromBatchRequestV1MultiError, or nil if none found.
func (m *CreateShortenedFromBatchRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortenedFromBatchRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetOriginal()) < 1 {
		err := CreateShortenedFromBatchRequestV1ValidationError{
			field:  "Original",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOriginal() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShortenedFromBatchRequestV1ValidationError{
						field:  fmt.Sprintf("Original[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShortenedFromBatchRequestV1ValidationError{
						field:  fmt.Sprintf("Original[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShortenedFromBatchRequestV1ValidationError{
					field:  fmt.Sprintf("Original[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateShortenedFromBatchRequestV1MultiError(errors)
	}

	return nil
}

// CreateShortenedFromBatchRequestV1MultiError is an error wrapping multiple
// validation errors returned by
// CreateShortenedFromBatchRequestV1.ValidateAll() if the designated
// constraints aren't met.
type CreateShortenedFromBatchRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortenedFromBatchRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortenedFromBatchRequestV1MultiError) AllErrors() []error { return m }

// CreateShortenedFromBatchRequestV1ValidationError is the validation error
// returned by CreateShortenedFromBatchRequestV1.Validate if the designated
// constraints aren't met.
type CreateShortenedFromBatchRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortenedFromBatchRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortenedFromBatchRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortenedFromBatchRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortenedFromBatchRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortenedFromBatchRequestV1ValidationError) ErrorName() string {
	return "CreateShortenedFromBatchRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortenedFromBatchRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortenedFromBatchRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortenedFromBatchRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortenedFromBatchRequestV1ValidationError{}

// Validate checks the field values on OriginalWithCorrelationV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OriginalWithCorrelationV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OriginalWithCorrelationV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OriginalWithCorrelationV1MultiError, or nil if none found.
func (m *OriginalWithCorrelationV1) ValidateAll() error {
	return m.validate(true)
}

func (m *OriginalWithCorrelationV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOriginal()) < 1 {
		err := OriginalWithCorrelationV1ValidationError{
			field:  "Original",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCorrelation()) < 1 {
		err := OriginalWithCorrelationV1ValidationError{
			field:  "Correlation",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OriginalWithCorrelationV1MultiError(errors)
	}

	return nil
}

// OriginalWithCorrelationV1MultiError is an error wrapping multiple validation
// errors returned by OriginalWithCorrelationV1.ValidateAll() if the
// designated constraints aren't met.
type OriginalWithCorrelationV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OriginalWithCorrelationV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OriginalWithCorrelationV1MultiError) AllErrors() []error { return m }

// OriginalWithCorrelationV1ValidationError is the validation error returned by
// OriginalWithCorrelationV1.Validate if the designated constraints aren't met.
type OriginalWithCorrelationV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OriginalWithCorrelationV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OriginalWithCorrelationV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OriginalWithCorrelationV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OriginalWithCorrelationV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OriginalWithCorrelationV1ValidationError) ErrorName() string {
	return "OriginalWithCorrelationV1ValidationError"
}

// Error satisfies the builtin error interface
func (e OriginalWithCorrelationV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOriginalWithCorrelationV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OriginalWithCorrelationV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OriginalWithCorrelationV1ValidationError{}

// Validate checks the field values on CreateShortenedFromBatchReplyV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShortenedFromBatchReplyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShortenedFromBatchReplyV1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateShortenedFromBatchReplyV1MultiError, or nil if none found.
func (m *CreateShortenedFromBatchReplyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShortenedFromBatchReplyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetShortened()) < 1 {
		err := CreateShortenedFromBatchReplyV1ValidationError{
			field:  "Shortened",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetShortened() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateShortenedFromBatchReplyV1ValidationError{
						field:  fmt.Sprintf("Shortened[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateShortenedFromBatchReplyV1ValidationError{
						field:  fmt.Sprintf("Shortened[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateShortenedFromBatchReplyV1ValidationError{
					field:  fmt.Sprintf("Shortened[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateShortenedFromBatchReplyV1MultiError(errors)
	}

	return nil
}

// CreateShortenedFromBatchReplyV1MultiError is an error wrapping multiple
// validation errors returned by CreateShortenedFromBatchReplyV1.ValidateAll()
// if the designated constraints aren't met.
type CreateShortenedFromBatchReplyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShortenedFromBatchReplyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShortenedFromBatchReplyV1MultiError) AllErrors() []error { return m }

// CreateShortenedFromBatchReplyV1ValidationError is the validation error
// returned by CreateShortenedFromBatchReplyV1.Validate if the designated
// constraints aren't met.
type CreateShortenedFromBatchReplyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShortenedFromBatchReplyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShortenedFromBatchReplyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShortenedFromBatchReplyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShortenedFromBatchReplyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShortenedFromBatchReplyV1ValidationError) ErrorName() string {
	return "CreateShortenedFromBatchReplyV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShortenedFromBatchReplyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShortenedFromBatchReplyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShortenedFromBatchReplyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShortenedFromBatchReplyV1ValidationError{}

// Validate checks the field values on ShortenedWithCorrelationV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShortenedWithCorrelationV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShortenedWithCorrelationV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShortenedWithCorrelationV1MultiError, or nil if none found.
func (m *ShortenedWithCorrelationV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ShortenedWithCorrelationV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetShortened()) < 1 {
		err := ShortenedWithCorrelationV1ValidationError{
			field:  "Shortened",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCorrelation()) < 1 {
		err := ShortenedWithCorrelationV1ValidationError{
			field:  "Correlation",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ShortenedWithCorrelationV1MultiError(errors)
	}

	return nil
}

// ShortenedWithCorrelationV1MultiError is an error wrapping multiple
// validation errors returned by ShortenedWithCorrelationV1.ValidateAll() if
// the designated constraints aren't met.
type ShortenedWithCorrelationV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShortenedWithCorrelationV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShortenedWithCorrelationV1MultiError) AllErrors() []error { return m }

// ShortenedWithCorrelationV1ValidationError is the validation error returned
// by ShortenedWithCorrelationV1.Validate if the designated constraints aren't met.
type ShortenedWithCorrelationV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShortenedWithCorrelationV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShortenedWithCorrelationV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShortenedWithCorrelationV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShortenedWithCorrelationV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShortenedWithCorrelationV1ValidationError) ErrorName() string {
	return "ShortenedWithCorrelationV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ShortenedWithCorrelationV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShortenedWithCorrelationV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShortenedWithCorrelationV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShortenedWithCorrelationV1ValidationError{}

// Validate checks the field values on ReadUserURLsReplyV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadUserURLsReplyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadUserURLsReplyV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadUserURLsReplyV1MultiError, or nil if none found.
func (m *ReadUserURLsReplyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadUserURLsReplyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOriginalWithShortened() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReadUserURLsReplyV1ValidationError{
						field:  fmt.Sprintf("OriginalWithShortened[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReadUserURLsReplyV1ValidationError{
						field:  fmt.Sprintf("OriginalWithShortened[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReadUserURLsReplyV1ValidationError{
					field:  fmt.Sprintf("OriginalWithShortened[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReadUserURLsReplyV1MultiError(errors)
	}

	return nil
}

// ReadUserURLsReplyV1MultiError is an error wrapping multiple validation
// errors returned by ReadUserURLsReplyV1.ValidateAll() if the designated
// constraints aren't met.
type ReadUserURLsReplyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadUserURLsReplyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadUserURLsReplyV1MultiError) AllErrors() []error { return m }

// ReadUserURLsReplyV1ValidationError is the validation error returned by
// ReadUserURLsReplyV1.Validate if the designated constraints aren't met.
type ReadUserURLsReplyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadUserURLsReplyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadUserURLsReplyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadUserURLsReplyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadUserURLsReplyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadUserURLsReplyV1ValidationError) ErrorName() string {
	return "ReadUserURLsReplyV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ReadUserURLsReplyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadUserURLsReplyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadUserURLsReplyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadUserURLsReplyV1ValidationError{}

// Validate checks the field values on OriginalWithShortenedV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OriginalWithShortenedV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OriginalWithShortenedV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OriginalWithShortenedV1MultiError, or nil if none found.
func (m *OriginalWithShortenedV1) ValidateAll() error {
	return m.validate(true)
}

func (m *OriginalWithShortenedV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOriginal()) < 1 {
		err := OriginalWithShortenedV1ValidationError{
			field:  "Original",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetShortened()) < 1 {
		err := OriginalWithShortenedV1ValidationError{
			field:  "Shortened",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OriginalWithShortenedV1MultiError(errors)
	}

	return nil
}

// OriginalWithShortenedV1MultiError is an error wrapping multiple validation
// errors returned by OriginalWithShortenedV1.ValidateAll() if the designated
// constraints aren't met.
type OriginalWithShortenedV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OriginalWithShortenedV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OriginalWithShortenedV1MultiError) AllErrors() []error { return m }

// OriginalWithShortenedV1ValidationError is the validation error returned by
// OriginalWithShortenedV1.Validate if the designated constraints aren't met.
type OriginalWithShortenedV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OriginalWithShortenedV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OriginalWithShortenedV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OriginalWithShortenedV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OriginalWithShortenedV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OriginalWithShortenedV1ValidationError) ErrorName() string {
	return "OriginalWithShortenedV1ValidationError"
}

// Error satisfies the builtin error interface
func (e OriginalWithShortenedV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOriginalWithShortenedV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OriginalWithShortenedV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OriginalWithShortenedV1ValidationError{}

// Validate checks the field values on ReadAmountOfURLsAndUsersReplyV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadAmountOfURLsAndUsersReplyV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadAmountOfURLsAndUsersReplyV1 with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ReadAmountOfURLsAndUsersReplyV1MultiError, or nil if none found.
func (m *ReadAmountOfURLsAndUsersReplyV1) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadAmountOfURLsAndUsersReplyV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUrlsAmount() < 0 {
		err := ReadAmountOfURLsAndUsersReplyV1ValidationError{
			field:  "UrlsAmount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsersAmount() < 0 {
		err := ReadAmountOfURLsAndUsersReplyV1ValidationError{
			field:  "UsersAmount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReadAmountOfURLsAndUsersReplyV1MultiError(errors)
	}

	return nil
}

// ReadAmountOfURLsAndUsersReplyV1MultiError is an error wrapping multiple
// validation errors returned by ReadAmountOfURLsAndUsersReplyV1.ValidateAll()
// if the designated constraints aren't met.
type ReadAmountOfURLsAndUsersReplyV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadAmountOfURLsAndUsersReplyV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadAmountOfURLsAndUsersReplyV1MultiError) AllErrors() []error { return m }

// ReadAmountOfURLsAndUsersReplyV1ValidationError is the validation error
// returned by ReadAmountOfURLsAndUsersReplyV1.Validate if the designated
// constraints aren't met.
type ReadAmountOfURLsAndUsersReplyV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadAmountOfURLsAndUsersReplyV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadAmountOfURLsAndUsersReplyV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadAmountOfURLsAndUsersReplyV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadAmountOfURLsAndUsersReplyV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadAmountOfURLsAndUsersReplyV1ValidationError) ErrorName() string {
	return "ReadAmountOfURLsAndUsersReplyV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ReadAmountOfURLsAndUsersReplyV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadAmountOfURLsAndUsersReplyV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadAmountOfURLsAndUsersReplyV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadAmountOfURLsAndUsersReplyV1ValidationError{}

// Validate checks the field values on DeleteUserURLsRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserURLsRequestV1) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserURLsRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserURLsRequestV1MultiError, or nil if none found.
func (m *DeleteUserURLsRequestV1) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserURLsRequestV1) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUrlsToDelete()) < 1 {
		err := DeleteUserURLsRequestV1ValidationError{
			field:  "UrlsToDelete",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUrlsToDelete() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := DeleteUserURLsRequestV1ValidationError{
				field:  fmt.Sprintf("UrlsToDelete[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteUserURLsRequestV1MultiError(errors)
	}

	return nil
}

// DeleteUserURLsRequestV1MultiError is an error wrapping multiple validation
// errors returned by DeleteUserURLsRequestV1.ValidateAll() if the designated
// constraints aren't met.
type DeleteUserURLsRequestV1MultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserURLsRequestV1MultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserURLsRequestV1MultiError) AllErrors() []error { return m }

// DeleteUserURLsRequestV1ValidationError is the validation error returned by
// DeleteUserURLsRequestV1.Validate if the designated constraints aren't met.
type DeleteUserURLsRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserURLsRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserURLsRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserURLsRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserURLsRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserURLsRequestV1ValidationError) ErrorName() string {
	return "DeleteUserURLsRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserURLsRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserURLsRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserURLsRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserURLsRequestV1ValidationError{}
