// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: urlshrt.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlshrtClient is the client API for Urlshrt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlshrtClient interface {
	ReadOriginal(ctx context.Context, in *ReadOriginalRequest, opts ...grpc.CallOption) (*ReadOriginalReply, error)
	CreateShortened(ctx context.Context, in *CreateShortenedRequest, opts ...grpc.CallOption) (*CreateShortenedReply, error)
	CreateShortenedFromBatch(ctx context.Context, in *CreateShortenedFromBatchRequest, opts ...grpc.CallOption) (*CreateShortenedFromBatchReply, error)
	ReadUserURLs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadUserURLsReply, error)
	ReadAmountOfURLsAndUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadAmountOfURLsAndUsersReply, error)
	DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*Empty, error)
}

type urlshrtClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlshrtClient(cc grpc.ClientConnInterface) UrlshrtClient {
	return &urlshrtClient{cc}
}

func (c *urlshrtClient) ReadOriginal(ctx context.Context, in *ReadOriginalRequest, opts ...grpc.CallOption) (*ReadOriginalReply, error) {
	out := new(ReadOriginalReply)
	err := c.cc.Invoke(ctx, "/api.Urlshrt/ReadOriginal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtClient) CreateShortened(ctx context.Context, in *CreateShortenedRequest, opts ...grpc.CallOption) (*CreateShortenedReply, error) {
	out := new(CreateShortenedReply)
	err := c.cc.Invoke(ctx, "/api.Urlshrt/CreateShortened", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtClient) CreateShortenedFromBatch(ctx context.Context, in *CreateShortenedFromBatchRequest, opts ...grpc.CallOption) (*CreateShortenedFromBatchReply, error) {
	out := new(CreateShortenedFromBatchReply)
	err := c.cc.Invoke(ctx, "/api.Urlshrt/CreateShortenedFromBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtClient) ReadUserURLs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadUserURLsReply, error) {
	out := new(ReadUserURLsReply)
	err := c.cc.Invoke(ctx, "/api.Urlshrt/ReadUserURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtClient) ReadAmountOfURLsAndUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReadAmountOfURLsAndUsersReply, error) {
	out := new(ReadAmountOfURLsAndUsersReply)
	err := c.cc.Invoke(ctx, "/api.Urlshrt/ReadAmountOfURLsAndUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtClient) DeleteUserURLs(ctx context.Context, in *DeleteUserURLsRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/api.Urlshrt/DeleteUserURLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlshrtServer is the server API for Urlshrt service.
// All implementations must embed UnimplementedUrlshrtServer
// for forward compatibility
type UrlshrtServer interface {
	ReadOriginal(context.Context, *ReadOriginalRequest) (*ReadOriginalReply, error)
	CreateShortened(context.Context, *CreateShortenedRequest) (*CreateShortenedReply, error)
	CreateShortenedFromBatch(context.Context, *CreateShortenedFromBatchRequest) (*CreateShortenedFromBatchReply, error)
	ReadUserURLs(context.Context, *Empty) (*ReadUserURLsReply, error)
	ReadAmountOfURLsAndUsers(context.Context, *Empty) (*ReadAmountOfURLsAndUsersReply, error)
	DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*Empty, error)
	mustEmbedUnimplementedUrlshrtServer()
}

// UnimplementedUrlshrtServer must be embedded to have forward compatible implementations.
type UnimplementedUrlshrtServer struct {
}

func (UnimplementedUrlshrtServer) ReadOriginal(context.Context, *ReadOriginalRequest) (*ReadOriginalReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOriginal not implemented")
}
func (UnimplementedUrlshrtServer) CreateShortened(context.Context, *CreateShortenedRequest) (*CreateShortenedReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortened not implemented")
}
func (UnimplementedUrlshrtServer) CreateShortenedFromBatch(context.Context, *CreateShortenedFromBatchRequest) (*CreateShortenedFromBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenedFromBatch not implemented")
}
func (UnimplementedUrlshrtServer) ReadUserURLs(context.Context, *Empty) (*ReadUserURLsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserURLs not implemented")
}
func (UnimplementedUrlshrtServer) ReadAmountOfURLsAndUsers(context.Context, *Empty) (*ReadAmountOfURLsAndUsersReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAmountOfURLsAndUsers not implemented")
}
func (UnimplementedUrlshrtServer) DeleteUserURLs(context.Context, *DeleteUserURLsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLs not implemented")
}
func (UnimplementedUrlshrtServer) mustEmbedUnimplementedUrlshrtServer() {}

// UnsafeUrlshrtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlshrtServer will
// result in compilation errors.
type UnsafeUrlshrtServer interface {
	mustEmbedUnimplementedUrlshrtServer()
}

func RegisterUrlshrtServer(s grpc.ServiceRegistrar, srv UrlshrtServer) {
	s.RegisterService(&Urlshrt_ServiceDesc, srv)
}

func _Urlshrt_ReadOriginal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOriginalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtServer).ReadOriginal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Urlshrt/ReadOriginal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtServer).ReadOriginal(ctx, req.(*ReadOriginalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urlshrt_CreateShortened_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtServer).CreateShortened(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Urlshrt/CreateShortened",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtServer).CreateShortened(ctx, req.(*CreateShortenedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urlshrt_CreateShortenedFromBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenedFromBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtServer).CreateShortenedFromBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Urlshrt/CreateShortenedFromBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtServer).CreateShortenedFromBatch(ctx, req.(*CreateShortenedFromBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urlshrt_ReadUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtServer).ReadUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Urlshrt/ReadUserURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtServer).ReadUserURLs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urlshrt_ReadAmountOfURLsAndUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtServer).ReadAmountOfURLsAndUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Urlshrt/ReadAmountOfURLsAndUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtServer).ReadAmountOfURLsAndUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Urlshrt_DeleteUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtServer).DeleteUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Urlshrt/DeleteUserURLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtServer).DeleteUserURLs(ctx, req.(*DeleteUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Urlshrt_ServiceDesc is the grpc.ServiceDesc for Urlshrt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Urlshrt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Urlshrt",
	HandlerType: (*UrlshrtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadOriginal",
			Handler:    _Urlshrt_ReadOriginal_Handler,
		},
		{
			MethodName: "CreateShortened",
			Handler:    _Urlshrt_CreateShortened_Handler,
		},
		{
			MethodName: "CreateShortenedFromBatch",
			Handler:    _Urlshrt_CreateShortenedFromBatch_Handler,
		},
		{
			MethodName: "ReadUserURLs",
			Handler:    _Urlshrt_ReadUserURLs_Handler,
		},
		{
			MethodName: "ReadAmountOfURLsAndUsers",
			Handler:    _Urlshrt_ReadAmountOfURLsAndUsers_Handler,
		},
		{
			MethodName: "DeleteUserURLs",
			Handler:    _Urlshrt_DeleteUserURLs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlshrt.proto",
}
