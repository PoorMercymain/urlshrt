// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: urlshrt.proto

package api

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlshrtV1Client is the client API for UrlshrtV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlshrtV1Client interface {
	// read original url providing shortened
	ReadOriginalV1(ctx context.Context, in *ReadOriginalRequestV1, opts ...grpc.CallOption) (*ReadOriginalReplyV1, error)
	// create shortened url from original
	CreateShortenedV1(ctx context.Context, in *CreateShortenedRequestV1, opts ...grpc.CallOption) (*CreateShortenedReplyV1, error)
	// create shortened urls providing batch of original urls with correlation ids
	CreateShortenedFromBatchV1(ctx context.Context, in *CreateShortenedFromBatchRequestV1, opts ...grpc.CallOption) (*CreateShortenedFromBatchReplyV1, error)
	// read all current user's urls
	ReadUserURLsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadUserURLsReplyV1, error)
	// read amount of urls and users, excluding deleted urls and those users, who have deleted all their urls
	ReadAmountOfURLsAndUsersV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadAmountOfURLsAndUsersReplyV1, error)
	// delete user's urls providing their short versions without host
	DeleteUserURLsV1(ctx context.Context, in *DeleteUserURLsRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type urlshrtV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUrlshrtV1Client(cc grpc.ClientConnInterface) UrlshrtV1Client {
	return &urlshrtV1Client{cc}
}

func (c *urlshrtV1Client) ReadOriginalV1(ctx context.Context, in *ReadOriginalRequestV1, opts ...grpc.CallOption) (*ReadOriginalReplyV1, error) {
	out := new(ReadOriginalReplyV1)
	err := c.cc.Invoke(ctx, "/api.v1.UrlshrtV1/ReadOriginalV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtV1Client) CreateShortenedV1(ctx context.Context, in *CreateShortenedRequestV1, opts ...grpc.CallOption) (*CreateShortenedReplyV1, error) {
	out := new(CreateShortenedReplyV1)
	err := c.cc.Invoke(ctx, "/api.v1.UrlshrtV1/CreateShortenedV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtV1Client) CreateShortenedFromBatchV1(ctx context.Context, in *CreateShortenedFromBatchRequestV1, opts ...grpc.CallOption) (*CreateShortenedFromBatchReplyV1, error) {
	out := new(CreateShortenedFromBatchReplyV1)
	err := c.cc.Invoke(ctx, "/api.v1.UrlshrtV1/CreateShortenedFromBatchV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtV1Client) ReadUserURLsV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadUserURLsReplyV1, error) {
	out := new(ReadUserURLsReplyV1)
	err := c.cc.Invoke(ctx, "/api.v1.UrlshrtV1/ReadUserURLsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtV1Client) ReadAmountOfURLsAndUsersV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadAmountOfURLsAndUsersReplyV1, error) {
	out := new(ReadAmountOfURLsAndUsersReplyV1)
	err := c.cc.Invoke(ctx, "/api.v1.UrlshrtV1/ReadAmountOfURLsAndUsersV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlshrtV1Client) DeleteUserURLsV1(ctx context.Context, in *DeleteUserURLsRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.v1.UrlshrtV1/DeleteUserURLsV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlshrtV1Server is the server API for UrlshrtV1 service.
// All implementations must embed UnimplementedUrlshrtV1Server
// for forward compatibility
type UrlshrtV1Server interface {
	// read original url providing shortened
	ReadOriginalV1(context.Context, *ReadOriginalRequestV1) (*ReadOriginalReplyV1, error)
	// create shortened url from original
	CreateShortenedV1(context.Context, *CreateShortenedRequestV1) (*CreateShortenedReplyV1, error)
	// create shortened urls providing batch of original urls with correlation ids
	CreateShortenedFromBatchV1(context.Context, *CreateShortenedFromBatchRequestV1) (*CreateShortenedFromBatchReplyV1, error)
	// read all current user's urls
	ReadUserURLsV1(context.Context, *emptypb.Empty) (*ReadUserURLsReplyV1, error)
	// read amount of urls and users, excluding deleted urls and those users, who have deleted all their urls
	ReadAmountOfURLsAndUsersV1(context.Context, *emptypb.Empty) (*ReadAmountOfURLsAndUsersReplyV1, error)
	// delete user's urls providing their short versions without host
	DeleteUserURLsV1(context.Context, *DeleteUserURLsRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedUrlshrtV1Server()
}

// UnimplementedUrlshrtV1Server must be embedded to have forward compatible implementations.
type UnimplementedUrlshrtV1Server struct {
}

func (UnimplementedUrlshrtV1Server) ReadOriginalV1(context.Context, *ReadOriginalRequestV1) (*ReadOriginalReplyV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOriginalV1 not implemented")
}
func (UnimplementedUrlshrtV1Server) CreateShortenedV1(context.Context, *CreateShortenedRequestV1) (*CreateShortenedReplyV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenedV1 not implemented")
}
func (UnimplementedUrlshrtV1Server) CreateShortenedFromBatchV1(context.Context, *CreateShortenedFromBatchRequestV1) (*CreateShortenedFromBatchReplyV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenedFromBatchV1 not implemented")
}
func (UnimplementedUrlshrtV1Server) ReadUserURLsV1(context.Context, *emptypb.Empty) (*ReadUserURLsReplyV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUserURLsV1 not implemented")
}
func (UnimplementedUrlshrtV1Server) ReadAmountOfURLsAndUsersV1(context.Context, *emptypb.Empty) (*ReadAmountOfURLsAndUsersReplyV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAmountOfURLsAndUsersV1 not implemented")
}
func (UnimplementedUrlshrtV1Server) DeleteUserURLsV1(context.Context, *DeleteUserURLsRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserURLsV1 not implemented")
}
func (UnimplementedUrlshrtV1Server) mustEmbedUnimplementedUrlshrtV1Server() {}

// UnsafeUrlshrtV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlshrtV1Server will
// result in compilation errors.
type UnsafeUrlshrtV1Server interface {
	mustEmbedUnimplementedUrlshrtV1Server()
}

func RegisterUrlshrtV1Server(s grpc.ServiceRegistrar, srv UrlshrtV1Server) {
	s.RegisterService(&UrlshrtV1_ServiceDesc, srv)
}

func _UrlshrtV1_ReadOriginalV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadOriginalRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtV1Server).ReadOriginalV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.UrlshrtV1/ReadOriginalV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtV1Server).ReadOriginalV1(ctx, req.(*ReadOriginalRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlshrtV1_CreateShortenedV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenedRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtV1Server).CreateShortenedV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.UrlshrtV1/CreateShortenedV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtV1Server).CreateShortenedV1(ctx, req.(*CreateShortenedRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlshrtV1_CreateShortenedFromBatchV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenedFromBatchRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtV1Server).CreateShortenedFromBatchV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.UrlshrtV1/CreateShortenedFromBatchV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtV1Server).CreateShortenedFromBatchV1(ctx, req.(*CreateShortenedFromBatchRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlshrtV1_ReadUserURLsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtV1Server).ReadUserURLsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.UrlshrtV1/ReadUserURLsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtV1Server).ReadUserURLsV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlshrtV1_ReadAmountOfURLsAndUsersV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtV1Server).ReadAmountOfURLsAndUsersV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.UrlshrtV1/ReadAmountOfURLsAndUsersV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtV1Server).ReadAmountOfURLsAndUsersV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlshrtV1_DeleteUserURLsV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserURLsRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlshrtV1Server).DeleteUserURLsV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.UrlshrtV1/DeleteUserURLsV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlshrtV1Server).DeleteUserURLsV1(ctx, req.(*DeleteUserURLsRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlshrtV1_ServiceDesc is the grpc.ServiceDesc for UrlshrtV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlshrtV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.UrlshrtV1",
	HandlerType: (*UrlshrtV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadOriginalV1",
			Handler:    _UrlshrtV1_ReadOriginalV1_Handler,
		},
		{
			MethodName: "CreateShortenedV1",
			Handler:    _UrlshrtV1_CreateShortenedV1_Handler,
		},
		{
			MethodName: "CreateShortenedFromBatchV1",
			Handler:    _UrlshrtV1_CreateShortenedFromBatchV1_Handler,
		},
		{
			MethodName: "ReadUserURLsV1",
			Handler:    _UrlshrtV1_ReadUserURLsV1_Handler,
		},
		{
			MethodName: "ReadAmountOfURLsAndUsersV1",
			Handler:    _UrlshrtV1_ReadAmountOfURLsAndUsersV1_Handler,
		},
		{
			MethodName: "DeleteUserURLsV1",
			Handler:    _UrlshrtV1_DeleteUserURLsV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "urlshrt.proto",
}
